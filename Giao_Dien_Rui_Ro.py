import streamlit as st
import pandas as pd
import joblib
import numpy as np
import plotly.graph_objects as go
import matplotlib.pyplot as plt
from PIL import Image

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(page_title="D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng", page_icon="üí∞", layout="wide")

# T√πy ch·ªânh CSS
st.markdown("""
    <style>
    .main {background-color: #F7F9FC;}
    .stButton>button {
        background-color: #2E86C1;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #1B4F72;
    }
    .stSlider .st-dn {background-color: #2E86C1;}
    .stRadio>label {font-size: 16px;}
    .stSelectbox>label {font-size: 16px;}
    .stNumberInput>label {font-size: 16px;}
    .tooltip {
        position: relative;
        display: inline-block;
    }
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 220px;
        background-color: #566573;
        color: white;
        text-align: center;
        border-radius: 6px;
        padding: 5px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -110px;
        opacity: 0;
        transition: opacity 0.3s;
    }
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    </style>
""", unsafe_allow_html=True)

# Load d·ªØ li·ªáu g·ªëc ƒë·ªÉ t√≠nh t·ª∑ l·ªá
file_path = "german_credit_data.csv"  # Thay b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø
df = pd.read_csv(file_path)
if "Unnamed: 0" in df.columns:
    df = df.drop(columns=["Unnamed: 0"])

# T√≠nh t·ª∑ l·ªá r·ªßi ro x·∫•u cho t·ª´ng ƒë·∫∑c tr∆∞ng
def calculate_risk_rates(df, feature):
    risk_rates = df.groupby(feature)["Risk"].value_counts(normalize=True).unstack().fillna(0)
    risk_rates["Bad_Rate"] = risk_rates["bad"] * 100
    return risk_rates["Bad_Rate"].to_dict()

age_risk_dict = calculate_risk_rates(df, "Age")
job_risk_dict = calculate_risk_rates(df, "Job")
credit_amount_risk_dict = calculate_risk_rates(df, "Credit amount")
duration_risk_dict = calculate_risk_rates(df, "Duration")
sex_risk_dict = calculate_risk_rates(df, "Sex")
housing_risk_dict = calculate_risk_rates(df, "Housing")
saving_risk_dict = calculate_risk_rates(df, "Saving accounts")
checking_risk_dict = calculate_risk_rates(df, "Checking account")
purpose_risk_dict = calculate_risk_rates(df, "Purpose")

# Load m√¥ h√¨nh v√† b·ªô x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_resource
def load_model():
    return joblib.load("credit_risk_model.pkl")

@st.cache_resource
def load_preprocessor():
    return joblib.load("preprocessor.pkl")

mo_hinh = load_model()
preprocessor = load_preprocessor()

# Header
st.markdown("<h1 style='text-align: center; color: #2E86C1; font-family: Arial;'>üîç D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: #566573; font-family: Arial;'>Ph√¢n t√≠ch kh·∫£ nƒÉng ho√†n tr·∫£ kho·∫£n vay m·ªôt c√°ch nhanh ch√≥ng v√† ch√≠nh x√°c</h4>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: #7F8C8D; font-family: Arial;'>NCKH: P.Nam, H.Nam, P.Huy, T.Ti·∫øn, V.Vinh</p>", unsafe_allow_html=True)

# Nh·∫≠p d·ªØ li·ªáu kh√°ch h√†ng
st.markdown("---")
st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üìã Nh·∫≠p th√¥ng tin kh√°ch h√†ng</h3>", unsafe_allow_html=True)

col1, col2 = st.columns([1, 1], gap="large")
with col1:
    with st.expander("Th√¥ng tin c√° nh√¢n", expanded=True):
        age = st.slider("üìÜ Tu·ªïi", 18, 100, 30, help="Ch·ªçn tu·ªïi c·ªßa kh√°ch h√†ng")
        sex = st.radio("üöª Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], horizontal=True)
        sex = "male" if sex == "Nam" else "female"
        job = st.selectbox("üëî Lo·∫°i c√¥ng vi·ªác", ["Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫", "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫", "C√≥ k·ªπ nƒÉng", "R·∫•t c√≥ k·ªπ nƒÉng"])
        job_mapping = {"Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫": 0, "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫": 1, "C√≥ k·ªπ nƒÉng": 2, "R·∫•t c√≥ k·ªπ nƒÉng": 3}
        job = job_mapping[job]

with col2:
    with st.expander("Th√¥ng tin t√†i ch√≠nh & m·ª•c ƒë√≠ch vay", expanded=True):
        credit_amount = st.number_input("üíµ Kho·∫£n vay (DM)", min_value=500, max_value=50000, value=10000, step=100)
        duration = st.slider("üïí Th·ªùi h·∫°n vay (th√°ng)", 6, 72, 24)
        purpose = st.selectbox("üéØ M·ª•c ƒë√≠ch vay", ["Mua √¥ t√¥", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã", "Mua radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng", "S·ª≠a ch·ªØa", "Gi√°o d·ª•c", "Kinh doanh", "Du l·ªãch/Kh√°c"])
        purpose_mapping = {"Mua √¥ t√¥": "car", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã": "furniture/equipment", "Mua radio/TV": "radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng": "domestic appliances",
                           "S·ª≠a ch·ªØa": "repairs", "Gi√°o d·ª•c": "education", "Kinh doanh": "business", "Du l·ªãch/Kh√°c": "vacation/others"}
        purpose = purpose_mapping[purpose]

col3, col4 = st.columns([1, 1], gap="large")
with col3:
    with st.expander("T√¨nh tr·∫°ng nh√† ·ªü", expanded=True):
        housing = st.selectbox("üè† H√¨nh th·ª©c nh√† ·ªü", ["S·ªü h·ªØu", "Thu√™", "Mi·ªÖn ph√≠"])
        housing_mapping = {"S·ªü h·ªØu": "own", "Thu√™": "rent", "Mi·ªÖn ph√≠": "free"}
        housing = housing_mapping[housing]

with col4:
    with st.expander("T√†i kho·∫£n ng√¢n h√†ng", expanded=True):
        st.markdown("""
            <div class="tooltip">
                üí∞ T√†i kho·∫£n ti·∫øt ki·ªám
                <span class="tooltiptext">Kh√¥ng c√≥: 0 DM<br>√çt: 1-500 DM<br>Trung b√¨nh: 501-1000 DM<br>Kh√° nhi·ªÅu: 1001-5000 DM<br>Nhi·ªÅu: >5000 DM</span>
            </div>
        """, unsafe_allow_html=True)
        saving_accounts = st.selectbox("", ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Kh√° nhi·ªÅu", "Nhi·ªÅu"], key="savings")
