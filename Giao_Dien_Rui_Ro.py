import streamlit as st
import pandas as pd
import joblib
import numpy as np
import plotly.graph_objects as go
from PIL import Image

# C·∫•u h√¨nh giao di·ªán Streamlit
st.set_page_config(
    page_title="D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng",
    layout="wide",
    page_icon="üè¶",
    initial_sidebar_state="expanded"
)

# T√πy ch·ªânh CSS n√¢ng cao
st.markdown("""
    <style>
    :root {
        --primary-color: #3498DB;
        --secondary-color: #2980B9;
        --success-color: #2ECC71;
        --danger-color: #E74C3C;
        --warning-color: #F39C12;
        --light-color: #ECF0F1;
        --dark-color: #2C3E50;
        --text-color: #34495E;
    }
    
    .main {
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%);
    }
    
    .stApp {
        background-color: var(--light-color);
    }
    
    .stButton>button {
        background: linear-gradient(to right, var(--primary-color), var(--secondary-color));
        color: white;
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: bold;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        font-size: 16px;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        background: linear-gradient(to right, var(--secondary-color), var(--primary-color));
    }
    
    .stSlider .st-dn {
        background-color: var(--primary-color);
    }
    
    .stRadio>div>label, .stSelectbox>label, .stNumberInput>label {
        font-size: 16px;
        color: var(--text-color);
        font-weight: 500;
    }
    
    .stExpander {
        background-color: white;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        border: 1px solid #e0e0e0;
    }
    
    .stExpander .st-emotion-cache-1q7spjk {
        background-color: white;
    }
    
    .stMarkdown h1 {
        text-align: center;
        color: var(--dark-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin-bottom: 0.5rem;
    }
    
    .stMarkdown h3 {
        color: var(--primary-color);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        border-bottom: 2px solid var(--primary-color);
        padding-bottom: 8px;
    }
    
    .feature-card {
        background: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        border-left: 4px solid var(--primary-color);
    }
    
    .result-card {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }
    
    .success-card {
        border-top: 4px solid var(--success-color);
    }
    
    .danger-card {
        border-top: 4px solid var(--danger-color);
    }
    
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: pointer;
    }
    
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 250px;
        background-color: var(--dark-color);
        color: white;
        text-align: center;
        border-radius: 8px;
        padding: 10px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        opacity: 0;
        transition: opacity 0.3s;
        font-size: 14px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .tooltip:hover .tooltiptext {
        visibility: visible;
        opacity: 1;
    }
    
    .footer {
        text-align: center;
        padding: 20px;
        color: #7F8C8D;
        font-family: Arial;
        margin-top: 30px;
        border-top: 1px solid #e0e0e0;
    }
    
    .divider {
        height: 1px;
        background: linear-gradient(to right, transparent, var(--primary-color), transparent);
        margin: 25px 0;
    }
    </style>
""", unsafe_allow_html=True)

# Load d·ªØ li·ªáu v√† m√¥ h√¨nh
@st.cache_resource
def load_model():
    return joblib.load("credit_risk_model.pkl")

@st.cache_resource
def load_preprocessor():
    return joblib.load("preprocessor.pkl")

# Load model and preprocessor
model = load_model()
preprocessor = load_preprocessor()

# T·∫°o c√°c risk dictionary m·∫´u (thay th·∫ø b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø c·ªßa b·∫°n)
age_risk_dict = {age: np.random.uniform(5, 30) for age in range(18, 101)}
sex_risk_dict = {"male": 15.2, "female": 12.5}
job_risk_dict = {0: 25.3, 1: 18.7, 2: 12.1, 3: 8.5}
credit_amount_risk_dict = {amt: np.random.uniform(10, 40) for amt in range(500, 50001, 100)}
duration_risk_dict = {dur: np.random.uniform(10, 35) for dur in range(6, 73)}
housing_risk_dict = {"own": 12.3, "rent": 18.7, "free": 15.4}
saving_risk_dict = {"NA": 25.6, "little": 18.2, "moderate": 12.7, "quite rich": 8.9, "rich": 5.1}
checking_risk_dict = {"NA": 22.4, "little": 16.8, "moderate": 11.3, "rich": 7.5}
purpose_risk_dict = {
    "car": 18.5, 
    "furniture/equipment": 15.2, 
    "radio/TV": 12.7, 
    "domestic appliances": 11.3,
    "repairs": 14.8, 
    "education": 9.5, 
    "business": 20.1, 
    "vacation/others": 16.3
}

# Header n√¢ng cao
st.markdown("""
    <div style="text-align: center; padding: 20px 0;">
        <h1 style="color: #2C3E50; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin-bottom: 10px;">
            üè¶ D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng
        </h1>
        <p style="color: #7F8C8D; font-size: 18px; max-width: 800px; margin: 0 auto;">
            Ph√¢n t√≠ch kh·∫£ nƒÉng ho√†n tr·∫£ kho·∫£n vay v·ªõi ƒë·ªô ch√≠nh x√°c cao b·∫±ng tr√≠ tu·ªá nh√¢n t·∫°o
        </p>
        <div style="margin-top: 15px;">
            <span style="background-color: #E8F4FC; color: #2E86C1; padding: 5px 15px; border-radius: 20px; font-size: 14px; display: inline-block; margin: 0 5px;">
                XGBoost Model
            </span>
            <span style="background-color: #E8F8F5; color: #28B463; padding: 5px 15px; border-radius: 20px; font-size: 14px; display: inline-block; margin: 0 5px;">
                ƒê·ªô ch√≠nh x√°c 89%
            </span>
        </div>
    </div>
""", unsafe_allow_html=True)

# Th√™m ·∫£nh header (n·∫øu c√≥)
try:
    header_img = Image.open("header_bank.jpg")
    st.image(header_img, use_column_width=True)
except:
    pass

# Nh·∫≠p d·ªØ li·ªáu kh√°ch h√†ng v·ªõi giao di·ªán card
st.markdown("""
    <div class="divider"></div>
    <h3 style="color: #2C3E50; font-family: 'Segoe UI'; display: flex; align-items: center;">
        <span style="background-color: #2E86C1; color: white; border-radius: 50%; width: 36px; height: 36px; display: inline-flex; align-items: center; justify-content: center; margin-right: 10px;">1</span>
        Th√¥ng tin kh√°ch h√†ng
    </h3>
""", unsafe_allow_html=True)

col1, col2 = st.columns([1, 1], gap="large")
with col1:
    with st.expander("**üë§ Th√¥ng tin c√° nh√¢n**", expanded=True):
        age = st.slider("**üìÜ Tu·ªïi**", 18, 100, 30, 
                       help="Tu·ªïi c·ªßa kh√°ch h√†ng ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng tr·∫£ n·ª£")
        sex = st.radio("**üöª Gi·ªõi t√≠nh**", ["Nam", "N·ªØ"], 
                       horizontal=True, index=0)
        sex = "male" if sex == "Nam" else "female"
        job = st.selectbox("**üëî Lo·∫°i c√¥ng vi·ªác**", 
                          ["Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫", "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫", 
                           "C√≥ k·ªπ nƒÉng", "R·∫•t c√≥ k·ªπ nƒÉng"])
        job_mapping = {
            "Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫": 0, 
            "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫": 1, 
            "C√≥ k·ªπ nƒÉng": 2, 
            "R·∫•t c√≥ k·ªπ nƒÉng": 3
        }
        job = job_mapping[job]

with col2:
    with st.expander("**üí∞ Th√¥ng tin t√†i ch√≠nh**", expanded=True):
        credit_amount = st.number_input("**üíµ Kho·∫£n vay (DM)**", 
                                      min_value=500, max_value=50000, 
                                      value=10000, step=100)
        duration = st.slider("**üïí Th·ªùi h·∫°n vay (th√°ng)**", 6, 72, 24,
                           help="Th·ªùi gian ho√†n tr·∫£ kho·∫£n vay")
        purpose = st.selectbox("**üéØ M·ª•c ƒë√≠ch vay**", 
                             ["Mua √¥ t√¥", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã", 
                              "Mua radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng", 
                              "S·ª≠a ch·ªØa", "Gi√°o d·ª•c", "Kinh doanh", 
                              "Du l·ªãch/Kh√°c"])
        purpose_mapping = {
            "Mua √¥ t√¥": "car", 
            "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã": "furniture/equipment", 
            "Mua radio/TV": "radio/TV", 
            "Mua thi·∫øt b·ªã gia d·ª•ng": "domestic appliances",
            "S·ª≠a ch·ªØa": "repairs", 
            "Gi√°o d·ª•c": "education", 
            "Kinh doanh": "business", 
            "Du l·ªãch/Kh√°c": "vacation/others"
        }
        purpose = purpose_mapping[purpose]

col3, col4 = st.columns([1, 1], gap="large")
with col3:
    with st.expander("**üè† T√¨nh tr·∫°ng nh√† ·ªü**", expanded=True):
        housing = st.selectbox("**H√¨nh th·ª©c nh√† ·ªü**", 
                             ["S·ªü h·ªØu", "Thu√™", "Mi·ªÖn ph√≠"])
        housing_mapping = {
            "S·ªü h·ªØu": "own", 
            "Thu√™": "rent", 
            "Mi·ªÖn ph√≠": "free"
        }
        housing = housing_mapping[housing]

with col4:
    with st.expander("**üí≥ T√†i kho·∫£n ng√¢n h√†ng**", expanded=True):
        st.markdown("""
            <div class="tooltip">
                <strong>üí∞ T√†i kho·∫£n ti·∫øt ki·ªám</strong>
                <span class="tooltiptext">
                    <strong>Gi·∫£i th√≠ch:</strong><br>
                    - Kh√¥ng c√≥: 0 DM<br>
                    - √çt: 1-500 DM<br>
                    - Trung b√¨nh: 501-1000 DM<br>
                    - Kh√° nhi·ªÅu: 1001-5000 DM<br>
                    - Nhi·ªÅu: >5000 DM
                </span>
            </div>
        """, unsafe_allow_html=True)
        saving_accounts = st.selectbox("", 
                                     ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Kh√° nhi·ªÅu", "Nhi·ªÅu"], 
                                     key="savings")
        saving_mapping = {
            "Kh√¥ng c√≥": "NA", 
            "√çt": "little", 
            "Trung b√¨nh": "moderate", 
            "Kh√° nhi·ªÅu": "quite rich", 
            "Nhi·ªÅu": "rich"
        }
        saving_accounts = saving_mapping[saving_accounts]

        st.markdown("""
            <div class="tooltip">
                <strong>üè¶ T√†i kho·∫£n v√£ng lai</strong>
                <span class="tooltiptext">
                    <strong>Gi·∫£i th√≠ch:</strong><br>
                    - Kh√¥ng c√≥: 0 DM<br>
                    - √çt: 1-200 DM<br>
                    - Trung b√¨nh: 201-500 DM<br>
                    - Nhi·ªÅu: >500 DM
                </span>
            </div>
        """, unsafe_allow_html=True)
        checking_account = st.selectbox("", 
                                      ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Nhi·ªÅu"], 
                                      key="checking")
        checking_mapping = {
            "Kh√¥ng c√≥": "NA", 
            "√çt": "little", 
            "Trung b√¨nh": "moderate", 
            "Nhi·ªÅu": "rich"
        }
        checking_account = checking_mapping[checking_account]

# N√∫t d·ª± ƒëo√°n v·ªõi hi·ªáu ·ª©ng
st.markdown("<div style='text-align: center; margin: 30px 0;'>", unsafe_allow_html=True)
if st.button("üîÆ D·ª± ƒëo√°n r·ªßi ro t√≠n d·ª•ng", key="predict_button", help="Nh·∫•n ƒë·ªÉ ph√¢n t√≠ch r·ªßi ro t√≠n d·ª•ng c·ªßa kh√°ch h√†ng"):
    with st.spinner("üîÑ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
        input_data = pd.DataFrame([{
            "Age": age,
            "Job": job,
            "Credit amount": credit_amount,
            "Duration": duration,
            "Sex": sex,
            "Housing": housing,
            "Saving accounts": saving_accounts,
            "Checking account": checking_account,
            "Purpose": purpose
        }])
        input_transformed = preprocessor.transform(input_data)
        prediction = model.predict_proba(input_transformed)[:, 1]
        risk_score = prediction[0]

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt t·ª´ng ƒë·∫∑c tr∆∞ng
    st.markdown("---")
    st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üìä Ph√¢n t√≠ch r·ªßi ro t·ª´ng ƒë·∫∑c tr∆∞ng</h3>", unsafe_allow_html=True)
    
    feature_contributions = {
        "Tu·ªïi": {"Gi√° tr·ªã": f"{age} tu·ªïi", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{age_risk_dict.get(age, 0):.2f}%"},
        "Gi·ªõi t√≠nh": {"Gi√° tr·ªã": "Nam" if sex == "male" else "N·ªØ", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{sex_risk_dict.get(sex, 0):.2f}%"},
        "C√¥ng vi·ªác": {"Gi√° tr·ªã": list(job_mapping.keys())[list(job_mapping.values()).index(job)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{job_risk_dict.get(job, 0):.2f}%"},
        "Kho·∫£n vay": {"Gi√° tr·ªã": f"{credit_amount:,} DM", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{credit_amount_risk_dict.get(credit_amount, 0):.2f}%"},
        "Th·ªùi h·∫°n": {"Gi√° tr·ªã": f"{duration} th√°ng", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{duration_risk_dict.get(duration, 0):.2f}%"},
        "Nh√† ·ªü": {"Gi√° tr·ªã": list(housing_mapping.keys())[list(housing_mapping.values()).index(housing)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{housing_risk_dict.get(housing, 0):.2f}%"},
        "T√†i kho·∫£n ti·∫øt ki·ªám": {"Gi√° tr·ªã": list(saving_mapping.keys())[list(saving_mapping.values()).index(saving_accounts)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{saving_risk_dict.get(saving_accounts, 0):.2f}%"},
        "T√†i kho·∫£n v√£ng lai": {"Gi√° tr·ªã": list(checking_mapping.keys())[list(checking_mapping.values()).index(checking_account)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{checking_risk_dict.get(checking_account, 0):.2f}%"},
        "M·ª•c ƒë√≠ch vay": {"Gi√° tr·ªã": list(purpose_mapping.keys())[list(purpose_mapping.values()).index(purpose)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{purpose_risk_dict.get(purpose, 0):.2f}%"}
    }
    
    feature_df = pd.DataFrame.from_dict(feature_contributions, orient="index")
    st.dataframe(
        feature_df.style
        .set_properties(**{'background-color': '#FFFFFF', 'border': '1px solid #EAEDED'})
        .highlight_max(subset=["T·ª∑ l·ªá r·ªßi ro x·∫•u"], color='#FADBD8')
        .highlight_min(subset=["T·ª∑ l·ªá r·ªßi ro x·∫•u"], color='#D5F5E3'),
        use_container_width=True
    )

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng h·ª£p v·ªõi card ƒë·∫πp
    st.markdown("---")
    st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üîç K·∫øt qu·∫£ d·ª± ƒëo√°n t·ªïng h·ª£p</h3>", unsafe_allow_html=True)
    
    if risk_score > 0.5:
        st.error(f"""
            ‚ö†Ô∏è **Nguy c∆° t√≠n d·ª•ng x·∫•u: {risk_score:.2%}**  
            *Kh√°ch h√†ng c√≥ nguy c∆° cao kh√¥ng ho√†n tr·∫£ kho·∫£n vay. C·∫ßn xem x√©t k·ªπ l∆∞·ª°ng tr∆∞·ªõc khi ph√™ duy·ªát.*
        """)
    else:
        st.success(f"""
            ‚úÖ **Kh·∫£ nƒÉng ho√†n tr·∫£ t·ªët: {1-risk_score:.2%}**  
            *Kh√°ch h√†ng c√≥ h·ªì s∆° t√≠n d·ª•ng t·ªët v√† kh·∫£ nƒÉng ho√†n tr·∫£ cao.*
        """)
    
    st.markdown(f"""
        <div style="background-color: #F8F9F9; padding: 15px; border-radius: 10px; margin-top: 20px;">
            <p style="color: #566573; font-size: 15px;">
                üìå <strong>Gi·∫£i th√≠ch:</strong> X√°c su·∫•t n√†y ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n m√¥ h√¨nh XGBoost v·ªõi ƒë·ªô ch√≠nh x√°c cao, 
                ph√¢n t√≠ch c√°c ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t ·∫£nh h∆∞·ªüng ƒë·∫øn r·ªßi ro t√≠n d·ª•ng.
            </p>
        </div>
    """, unsafe_allow_html=True)

    # Bi·ªÉu ƒë·ªì tr·ª±c quan n√¢ng cao
    st.markdown("---")
    st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üìà Tr·ª±c quan h√≥a r·ªßi ro</h3>", unsafe_allow_html=True)
    
    col_chart1, col_chart2 = st.columns(2)
    with col_chart1:
        fig1 = go.Figure(go.Indicator(
            mode="gauge+number+delta",
            value=risk_score * 100,
            title={"text": "Nguy c∆° t√≠n d·ª•ng x·∫•u (%)", "font": {"size": 18}},
            domain={"x": [0, 1], "y": [0, 1]},
            gauge={
                "axis": {"range": [0, 100], "tickwidth": 1, "tickcolor": "#2E86C1"},
                "bar": {"color": "#E74C3C" if risk_score > 0.5 else "#28B463", "thickness": 0.3},
                "bgcolor": "white",
                "borderwidth": 2,
                "bordercolor": "gray",
                "steps": [
                    {"range": [0, 30], "color": "#D5F5E3"},
                    {"range": [30, 70], "color": "#FDEBD0"},
                    {"range": [70, 100], "color": "#FADBD8"}
                ],
                "threshold": {
                    "line": {"color": "black", "width": 4},
                    "thickness": 0.8,
                    "value": risk_score * 100
                }
            }
        ))
        fig1.update_layout(
            height=350,
            margin=dict(l=50, r=50, b=50, t=80),
            font=dict(color="#2E86C1", family="Arial")
        )
        st.plotly_chart(fig1, use_container_width=True)

    with col_chart2:
        labels = ["Ho√†n tr·∫£ t·ªët", "N·ª£ x·∫•u"]
        values = [1 - risk_score, risk_score]
        colors = ["#28B463", "#E74C3C"]
        
        fig3 = go.Figure(data=[go.Pie(
            labels=labels, 
            values=values, 
            hole=0.5,
            marker=dict(colors=colors),
            textinfo='percent+value',
            hoverinfo='label+percent',
            textfont_size=15
        )])
        
        fig3.update_layout(
            title="Ph√¢n b·ªï r·ªßi ro t√≠n d·ª•ng",
            title_x=0.5,
            title_font=dict(size=18),
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=-0.2,
                xanchor="center",
                x=0.5
            ),
            height=350,
            margin=dict(l=50, r=50, b=50, t=80)
        )
        st.plotly_chart(fig3, use_container_width=True)

# Footer chuy√™n nghi·ªáp
st.markdown("""
    <div class="footer">
        <div style="margin-bottom: 10px;">
            <span style="margin: 0 10px;">üìû Hotline: 1900 1234</span>
            <span style="margin: 0 10px;">‚úâÔ∏è Email: support@creditrisk.ai</span>
            <span style="margin: 0 10px;">üè¢ ƒê·ªãa ch·ªâ: 123 Nguy·ªÖn Du, H√† N·ªôi</span>
        </div>
        <p>¬© 2025 - H·ªá th·ªëng D·ª± ƒëo√°n R·ªßi ro T√≠n d·ª•ng | Ph√°t tri·ªÉn b·ªüi nh√≥m NCKH</p>
        <div style="margin-top: 15px;">
            <img src="https://img.icons8.com/ios-filled/30/3498DB/facebook.png" style="margin: 0 5px;"/>
            <img src="https://img.icons8.com/ios-filled/30/3498DB/twitter.png" style="margin: 0 5px;"/>
            <img src="https://img.icons8.com/ios-filled/30/3498DB/linkedin.png" style="margin: 0 5px;"/>
        </div>
    </div>
""", unsafe_allow_html=True)
