import streamlit as st
import pandas as pd
import numpy as np
import pickle

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import MinMaxScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from xgboost import XGBClassifier

# Load model v√† pipeline
with open('credit_model.pkl', 'rb') as f:
    model = pickle.load(f)

with open('credit_pipeline.pkl', 'rb') as f:
    pipeline = pickle.load(f)

# App UI
st.set_page_config(page_title="D·ª± ƒëo√°n r·ªßi ro t√≠n d·ª•ng", layout="centered")

# CSS n√¢ng c·∫•p giao di·ªán
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    html, body, [class*="css"] {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #f0f4f8 0%, #ffffff 100%);
    }

    .stExpander {
        background-color: #ffffff;
        border: 1px solid #e1e1e1;
        border-radius: 16px !important;
        padding: 20px !important;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }

    .footer {
        text-align: center;
        margin-top: 30px;
        color: gray;
        font-size: 14px;
    }

    .card {
        padding: 20px;
        border-radius: 15px;
        margin-top: 20px;
        text-align: center;
    }

    .low-risk {
        background-color: #e8f8f5;
        color: #1abc9c;
    }

    .high-risk {
        background-color: #fdecea;
        color: #e74c3c;
    }

    h1 {
        background: -webkit-linear-gradient(45deg, #2E86C1, #1ABC9C);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: 700;
        font-size: 36px;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üìä D·ª± ƒëo√°n r·ªßi ro t√≠n d·ª•ng")

with st.expander("üìã Nh·∫≠p th√¥ng tin kh√°ch h√†ng", expanded=True):
    credit_amount = st.number_input("üí∞ S·ªë ti·ªÅn vay (DM)", min_value=0, value=1000)
    duration = st.slider("‚è≥ Th·ªùi h·∫°n vay (th√°ng)", 4, 72, 24)
    
    checking_status = st.selectbox("üè¶ Tr·∫°ng th√°i t√†i kho·∫£n ng√¢n h√†ng", 
                                   ['<0', '0<=X<200', '>=200', 'no checking'])
    credit_history = st.selectbox("üìú L·ªãch s·ª≠ t√≠n d·ª•ng", 
                                  ['no credits/all paid', 'all paid', 'existing paid', 'delayed previously', 'critical/other existing credit'])
    purpose = st.selectbox("üéØ M·ª•c ƒë√≠ch vay", 
                           ['radio/tv', 'education', 'furniture/equipment', 'new car', 'used car', 'business', 'repairs', 'other'])

    age = st.slider("üéÇ Tu·ªïi", 18, 75, 30)
    housing = st.radio("üèòÔ∏è Lo·∫°i nh√† ·ªü", ['own', 'for free', 'rent'])
    job = st.radio("üíº Ngh·ªÅ nghi·ªáp", ['unskilled resident', 'skilled', 'highly skilled', 'unemployed/non-resident'])

    sex = st.radio("‚ößÔ∏è Gi·ªõi t√≠nh", ['male', 'female'])

# G·ªôp d·ªØ li·ªáu
input_data = {
    "checking_status": checking_status,
    "duration": duration,
    "credit_history": credit_history,
    "purpose": purpose,
    "credit_amount": credit_amount,
    "age": age,
    "housing": housing,
    "job": job,
    "sex": sex
}

input_df = pd.DataFrame([input_data])

# X·ª≠ l√Ω d·ªØ li·ªáu
X_transformed = pipeline.transform(input_df)

# D·ª± ƒëo√°n
risk_score = model.predict_proba(X_transformed)[0][1]

# Hi·ªÉn th·ªã k·∫øt qu·∫£
risk_level = "‚ö†Ô∏è R·ªßi ro cao" if risk_score > 0.5 else "‚úÖ R·ªßi ro th·∫•p"
risk_class = "high-risk" if risk_score > 0.5 else "low-risk"

st.markdown(f"""
    <div class="card {risk_class}">
        <h3>{risk_level}</h3>
        <p><b>X√°c su·∫•t r·ªßi ro: {risk_score:.2%}</b></p>
    </div>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë·∫ßu v√†o (t√πy ch·ªçn)
with st.expander("üîé Xem l·∫°i d·ªØ li·ªáu ƒë√£ nh·∫≠p"):
    st.dataframe(input_df.style.set_properties(**{
        'background-color': '#FAFAFA',
        'color': '#111',
        'border-color': 'lightgray'
    }))

# Footer
st.markdown("""
<div class="footer">
    üìò Nghi√™n c·ª©u khoa h·ªçc 2025 ‚Ä¢ ƒê·∫°i h·ªçc XYZ<br>
    Li√™n h·ªá: <a href="mailto:info@university.edu">info@university.edu</a>
</div>
""", unsafe_allow_html=True)
